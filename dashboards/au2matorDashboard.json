{
	"id": "620984f7-be38-4291-9d98-8f587abc72a1",
	"type": "page/dashboard",
	"title": "au2mator",
	"content": {
		"_type": "layout/list",
		"contents": [
			{
				"_type": "layout/column",
				"columns": [
					{
						"width": 100,
						"contents": [
							{
								"_type": "layout/list",
								"contents": [
									{
										"_type": "layout/column",
										"columns": [
											{
												"width": 50,
												"contents": [
													{
														"_type": "layout/list",
														"contents": [
															{
																"_type": "layout/column",
																"columns": [
																	{
																		"width": 50,
																		"contents": [
																			{
																				"_type": "layout/list",
																				"contents": [
																					{
																						"_type": "tile/image",
																						"config": {
																							"context": {},
																							"source": {},
																							"display": {
																								"src": "",
                                                                                                "content": "<img src=\"/images/logos/au2mator.png\" height=\"70\"/>"
																							}
																						},
																						"description": "",
																						"title": ""
																					}
																				]
																			}
																		]
																	},
																	{
																		"width": 50,
																		"contents": [
																			{
																				"_type": "layout/list",
																				"contents": [
																					{
																						"_type": "tile/sql-as-scalar",
																						"config": {
																							"context": {},
																							"source": {
																								"_security": "signing",
																								"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																								"querystring": "select Count(ID) from Services where IsDeleted = '0'",
																								"__signed": {
																									"payload": {
																										"_security": "signing",
																										"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																										"querystring": "select Count(ID) from Services where IsDeleted = '0'"
																									},
																									"signature": ""
																								}
																							},
																							"display": {
																								"fontsize": 90,
																								"coerceObject": true,
																								"unit": "Services",
																								"customTemplate": ""
																							}
																						},
																						"title": "Total Services",
																						"description": ""
																					}
																				]
																			}
																		]
																	}
																]
															},
															{
																"_type": "layout/column",
																"columns": [
																	{
																		"width": 50,
																		"contents": [
																			{
																				"_type": "layout/list",
																				"contents": [
																					{
																						"_type": "tile/sql-as-donut",
																						"config": {
																							"context": {},
																							"source": {
																								"_security": "signing",
																								"columnOverrides": {
																									"value": "id",
																									"grouping": "finalStatus"
																								},
																								"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																								"querystring": "--Declare a variable to hold the page time frame \nDECLARE @StartDate AS Datetime\n\n--Depending on the value of the timeframe.isoDuration value, set the @StartDate parameter \nSET @StartDate = CASE {{timeframe.isoDuration}}\n\t WHEN 'PT1H'  THEN DATEADD(HOUR, -1, GETDATE())\n\t WHEN 'PT12H' THEN DATEADD(HOUR, -12, GETDATE())\n\t WHEN 'PT24H' THEN DATEADD(HOUR, -24, GETDATE())\n\t WHEN 'P7D'   THEN DATEADD(d, -7, GETDATE())\n\t WHEN 'P30D'  THEN DATEADD(d, -30, GETDATE())\n\t WHEN 'P3M'   THEN DATEADD(MM, -3, GETDATE())\n\t WHEN 'P6M'   THEN DATEADD(MM, -6, GETDATE())\n\t WHEN 'P12M'  THEN DATEADD(MM, -12, GETDATE())\n\t ELSE convert(datetime,0)\n  END\n\n--In our query, use the @StartDate parameter as our starting date \n\n\n\nselect FinalStatus, Count (FinalStatus) as Count from Requests where FinalStatus is not null and StartTime >= @StartDate group by FinalStatus",
																								"__signed": {
																									"payload": {
																										"_security": "signing",
																										"columnOverrides": {
																											"value": "id",
																											"grouping": "finalStatus"
																										},
																										"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																										"querystring": "--Declare a variable to hold the page time frame \nDECLARE @StartDate AS Datetime\n\n--Depending on the value of the timeframe.isoDuration value, set the @StartDate parameter \nSET @StartDate = CASE {{timeframe.isoDuration}}\n\t WHEN 'PT1H'  THEN DATEADD(HOUR, -1, GETDATE())\n\t WHEN 'PT12H' THEN DATEADD(HOUR, -12, GETDATE())\n\t WHEN 'PT24H' THEN DATEADD(HOUR, -24, GETDATE())\n\t WHEN 'P7D'   THEN DATEADD(d, -7, GETDATE())\n\t WHEN 'P30D'  THEN DATEADD(d, -30, GETDATE())\n\t WHEN 'P3M'   THEN DATEADD(MM, -3, GETDATE())\n\t WHEN 'P6M'   THEN DATEADD(MM, -6, GETDATE())\n\t WHEN 'P12M'  THEN DATEADD(MM, -12, GETDATE())\n\t ELSE convert(datetime,0)\n  END\n\n--In our query, use the @StartDate parameter as our starting date \n\n\n\nselect FinalStatus, Count (FinalStatus) as Count from Requests where FinalStatus is not null and StartTime >= @StartDate group by FinalStatus"
																									},
																									"signature": ""
																								}
																							},
																							"display": {
																								"sizeMode": "default",
																								"legendScale": 1,
																								"showLegend": true,
																								"legendPosition": "right",
																								"palette": 2
																							}
																						},
																						"description": "",
																						"title": "Total Requests"
																					},
																					{
																						"_type": "tile/powershell-as-donut",
																						"config": {
																							"context": {},
																							"source": {
																								"scriptTimeoutSecs": 54,
																								"scriptIntervalSecs": 56,
																								"runAsIdentity": "Default",
																								"_security": "signing",
																								"dataType": "object",
																								"columnOverrides": {
																									"value": "Count",
																									"grouping": "Displayname"
																								},
																								"profile": "",
																								"script": "\n$Now=[DateTime]::Now\n#$Now=Get-Date $Now -Format G\nswitch ($timeFrame) {\n    \"last1Hour\" { $CompareDate = $Now.AddHours(-1) }\n    \"last12Hours\" { $CompareDate = $Now.AddHours(-12) }\n    \"last24Hours\" { $CompareDate = $Now.AddHours(-24) }\n    \"last7Days\" { $CompareDate = $Now.AddDays(-7) }\n    \"last30Days\" { $CompareDate = $Now.AddDays(-30) }\n    \"last3Months\" { $CompareDate = $Now.AddMonths(-3) }\n    \"last6Months\" { $CompareDate = $Now.AddMonths(-6) }\n    \"last12Months\" { $CompareDate = $Now.AddMonths(-12)}\n}\n\n\n$CompareDate=Get-Date -format \"yyyy-MM-dd 00:00:00.000\" (Get-Date $CompareDate )\n\n$Result=Invoke-Sqlcmd -ServerInstance demo01 -Database au2mator40Demo2 -Query \"\nselect InitiatedBy, Count(InitiatedBy) as Count from Requests as R\ninner join Services as S on R.ServiceId = S.Id\nwhere r.StartTime >= '$CompareDate'\nGroup by InitiatedBy\" -Username test -Password test\n\n$myObject=@()\n\n\n\n\nforeach ($r in $Result)\n{\n    $Displayname=(Get-ADUser -Identity $r.initiatedBy.split(\"\\\")[1] -Properties Displayname).Displayname\n\n    $myHashtable = @{\n        Displayname     = $Displayname\n        Count = $r.count\n\n    }\n    $myObject += [pscustomobject]$myHashtable\n}\n\n$myObject | Sort-Object -Property Count -Descending\n\n$myObject | Where-Object -Property Displayname -Value \"Michael Seidl\" -ne | Sort-Object -Property Count -Descending",
																								"__signed": {
																									"payload": {
																										"scriptTimeoutSecs": 54,
																										"scriptIntervalSecs": 56,
																										"runAsIdentity": "Default",
																										"_security": "signing",
																										"dataType": "object",
																										"columnOverrides": {
																											"value": "Count",
																											"grouping": "Displayname"
																										},
																										"profile": "",
																										"script": "\n$Now=[DateTime]::Now\n#$Now=Get-Date $Now -Format G\nswitch ($timeFrame) {\n    \"last1Hour\" { $CompareDate = $Now.AddHours(-1) }\n    \"last12Hours\" { $CompareDate = $Now.AddHours(-12) }\n    \"last24Hours\" { $CompareDate = $Now.AddHours(-24) }\n    \"last7Days\" { $CompareDate = $Now.AddDays(-7) }\n    \"last30Days\" { $CompareDate = $Now.AddDays(-30) }\n    \"last3Months\" { $CompareDate = $Now.AddMonths(-3) }\n    \"last6Months\" { $CompareDate = $Now.AddMonths(-6) }\n    \"last12Months\" { $CompareDate = $Now.AddMonths(-12)}\n}\n\n\n$CompareDate=Get-Date -format \"yyyy-MM-dd 00:00:00.000\" (Get-Date $CompareDate )\n\n$Result=Invoke-Sqlcmd -ServerInstance demo01 -Database au2mator40Demo2 -Query \"\nselect InitiatedBy, Count(InitiatedBy) as Count from Requests as R\ninner join Services as S on R.ServiceId = S.Id\nwhere r.StartTime >= '$CompareDate'\nGroup by InitiatedBy\" -Username test -Password test\n\n$myObject=@()\n\n\n\n\nforeach ($r in $Result)\n{\n    $Displayname=(Get-ADUser -Identity $r.initiatedBy.split(\"\\\")[1] -Properties Displayname).Displayname\n\n    $myHashtable = @{\n        Displayname     = $Displayname\n        Count = $r.count\n\n    }\n    $myObject += [pscustomobject]$myHashtable\n}\n\n$myObject | Sort-Object -Property Count -Descending\n\n$myObject | Where-Object -Property Displayname -Value \"Michael Seidl\" -ne | Sort-Object -Property Count -Descending"
																									},
																									"signature": ""
																								}
																							},
																							"display": {
																								"sizeMode": "default",
																								"legendScale": 1,
																								"showLegend": true,
																								"legendPosition": "right",
																								"palette": 0
																							}
																						},
																						"title": "Heavy Users",
																						"description": ""
																					}
																				]
																			}
																		]
																	},
																	{
																		"width": 50,
																		"contents": [
																			{
																				"_type": "layout/list",
																				"contents": [
																					{
																						"_type": "tile/sql-as-donut",
																						"config": {
																							"context": {},
																							"source": {
																								"_security": "signing",
																								"columnOverrides": {
																									"value": null,
																									"grouping": null
																								},
																								"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																								"querystring": "--Declare a variable to hold the page time frame \nDECLARE @StartDate AS Datetime\n\n--Depending on the value of the timeframe.isoDuration value, set the @StartDate parameter \nSET @StartDate = CASE {{timeframe.isoDuration}}\n\t WHEN 'PT1H'  THEN DATEADD(HOUR, -1, GETDATE())\n\t WHEN 'PT12H' THEN DATEADD(HOUR, -12, GETDATE())\n\t WHEN 'PT24H' THEN DATEADD(HOUR, -24, GETDATE())\n\t WHEN 'P7D'   THEN DATEADD(d, -7, GETDATE())\n\t WHEN 'P30D'  THEN DATEADD(d, -30, GETDATE())\n\t WHEN 'P3M'   THEN DATEADD(MM, -3, GETDATE())\n\t WHEN 'P6M'   THEN DATEADD(MM, -6, GETDATE())\n\t WHEN 'P12M'  THEN DATEADD(MM, -12, GETDATE())\n\t ELSE convert(datetime,0)\n  END\n\n--In our query, use the @StartDate parameter as our starting date \n\n\nselect Top(8) s.Name, Count (s.Name) as Count from Requests as R\ninner join Services as S on R.ServiceId = S.Id\nwhere r.StartTime >= @StartDate\ngroup by s.name order by Count desc",
																								"__signed": {
																									"payload": {
																										"_security": "signing",
																										"columnOverrides": {
																											"value": null,
																											"grouping": null
																										},
																										"connectionstring": "Data Source=demo01; Initial Catalog=au2mator40Demo2;User ID=test;Password=test;",
																										"querystring": "--Declare a variable to hold the page time frame \nDECLARE @StartDate AS Datetime\n\n--Depending on the value of the timeframe.isoDuration value, set the @StartDate parameter \nSET @StartDate = CASE {{timeframe.isoDuration}}\n\t WHEN 'PT1H'  THEN DATEADD(HOUR, -1, GETDATE())\n\t WHEN 'PT12H' THEN DATEADD(HOUR, -12, GETDATE())\n\t WHEN 'PT24H' THEN DATEADD(HOUR, -24, GETDATE())\n\t WHEN 'P7D'   THEN DATEADD(d, -7, GETDATE())\n\t WHEN 'P30D'  THEN DATEADD(d, -30, GETDATE())\n\t WHEN 'P3M'   THEN DATEADD(MM, -3, GETDATE())\n\t WHEN 'P6M'   THEN DATEADD(MM, -6, GETDATE())\n\t WHEN 'P12M'  THEN DATEADD(MM, -12, GETDATE())\n\t ELSE convert(datetime,0)\n  END\n\n--In our query, use the @StartDate parameter as our starting date \n\n\nselect Top(8) s.Name, Count (s.Name) as Count from Requests as R\ninner join Services as S on R.ServiceId = S.Id\nwhere r.StartTime >= @StartDate\ngroup by s.name order by Count desc"
																									},
																									"signature": ""
																								}
																							},
																							"display": {
																								"sizeMode": "default",
																								"legendScale": 1,
																								"showLegend": true,
																								"legendPosition": "right",
																								"palette": 0
																							}
																						},
																						"description": "",
																						"title": "Top 8 Service Usage"
																					}
																				]
																			}
																		]
																	}
																]
															}
														]
													}
												]
											},
											{
												"width": 50,
												"contents": [
													{
														"_type": "layout/list",
														"contents": [
															{
																"_type": "tile/web-content",
																"config": {
																	"context": {},
																	"source": {},
																	"display": {
																		"height": 426,
																		"zoom": 0.3,
																		"border": false,
																		"scrolling": false,
																		"refresh": true,
																		"src": "http://localhost/",
																		"content": "",
																		"link": true
																	}
																},
																"description": "",
																"title": "Start au2mator"
															}
														]
													}
												]
											}
										]
									}
								]
							}
						]
					}
				]
			},
			{
				"_type": "layout/column",
				"columns": [
					{
						"width": 100,
						"contents": [
							{
								"_type": "layout/list",
								"contents": [
									{
										"_type": "layout/column",
										"columns": [
											{
												"width": 50,
												"contents": [
													{
														"_type": "layout/list",
														"contents": [
															{
																"_type": "tile/image",
																"config": {
																	"context": {},
																	"source": {},
																	"display": {
																		"src": ""
																	}
																},
																"description": "",
																"title": "System Center Orchestrator"
															}
														]
													}
												]
											},
											{
												"width": 50,
												"contents": [
													{
														"_type": "layout/list",
														"contents": [
															{
																"_type": "tile/new",
																"config": {},
																"description": "",
																"title": "Azure Automation"
															}
														]
													}
												]
											}
										]
									}
								]
							}
						]
					}
				]
			},
			{
				"_type": "layout/column",
				"columns": [
					{
						"width": 100,
						"contents": [
							{
								"_type": "layout/list",
								"contents": [
									{
										"_type": "layout/column",
										"columns": [
											{
												"width": 50,
												"contents": [
													{
														"_type": "layout/list",
														"contents": [
															{
																"_type": "layout/column",
																"columns": [
																	{
																		"width": 50,
																		"contents": [
																			{
																				"_type": "layout/list",
																				"contents": [
																					{
																						"_type": "tile/sql-as-donut",
																						"config": {
																							"context": {},
																							"source": {
																								"_security": "signing",
																								"columnOverrides": {
																									"value": null,
																									"grouping": null
																								},
																								"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																								"querystring": "--Declare a variable to hold the page time frame \nDECLARE @StartDate AS Datetime\n\n--Depending on the value of the timeframe.isoDuration value, set the @StartDate parameter \nSET @StartDate = CASE 'P30D'\n\t WHEN 'PT1H'  THEN DATEADD(HOUR, -1, GETDATE())\n\t WHEN 'PT12H' THEN DATEADD(HOUR, -12, GETDATE())\n\t WHEN 'PT24H' THEN DATEADD(HOUR, -24, GETDATE())\n\t WHEN 'P7D'   THEN DATEADD(d, -7, GETDATE())\n\t WHEN 'P30D'  THEN DATEADD(d, -30, GETDATE())\n\t WHEN 'P3M'   THEN DATEADD(MM, -3, GETDATE())\n\t WHEN 'P6M'   THEN DATEADD(MM, -6, GETDATE())\n\t WHEN 'P12M'  THEN DATEADD(MM, -12, GETDATE())\n\t ELSE convert(datetime,0)\n  END\n\n\n  \tSelect Count(POLICYINSTANCES.Status) as Count, POLICYINSTANCES.Status as Status\n\t From [Microsoft.SystemCenter.Orchestrator.Runtime].Jobs AS Jobs\n\t INNER JOIN POLICIES ON Jobs.RunbookId = POLICIES.UniqueID\n\t inner join POLICYINSTANCES on jobs.Id = POLICYINSTANCES.JobId where  TimeEnded >= @StartDate \n\t Group by POLICYINSTANCES.Status\n",
																								"__signed": {
																									"payload": {
																										"_security": "signing",
																										"columnOverrides": {
																											"value": null,
																											"grouping": null
																										},
																										"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																										"querystring": "--Declare a variable to hold the page time frame \nDECLARE @StartDate AS Datetime\n\n--Depending on the value of the timeframe.isoDuration value, set the @StartDate parameter \nSET @StartDate = CASE 'P30D'\n\t WHEN 'PT1H'  THEN DATEADD(HOUR, -1, GETDATE())\n\t WHEN 'PT12H' THEN DATEADD(HOUR, -12, GETDATE())\n\t WHEN 'PT24H' THEN DATEADD(HOUR, -24, GETDATE())\n\t WHEN 'P7D'   THEN DATEADD(d, -7, GETDATE())\n\t WHEN 'P30D'  THEN DATEADD(d, -30, GETDATE())\n\t WHEN 'P3M'   THEN DATEADD(MM, -3, GETDATE())\n\t WHEN 'P6M'   THEN DATEADD(MM, -6, GETDATE())\n\t WHEN 'P12M'  THEN DATEADD(MM, -12, GETDATE())\n\t ELSE convert(datetime,0)\n  END\n\n\n  \tSelect Count(POLICYINSTANCES.Status) as Count, POLICYINSTANCES.Status as Status\n\t From [Microsoft.SystemCenter.Orchestrator.Runtime].Jobs AS Jobs\n\t INNER JOIN POLICIES ON Jobs.RunbookId = POLICIES.UniqueID\n\t inner join POLICYINSTANCES on jobs.Id = POLICYINSTANCES.JobId where  TimeEnded >= @StartDate \n\t Group by POLICYINSTANCES.Status\n"
																									},
																									"signature": ""
																								}
																							},
																							"display": {
																								"sizeMode": "default",
																								"legendScale": 1,
																								"showLegend": true,
																								"legendPosition": "right",
																								"palette": 0
																							}
																						},
																						"description": "",
																						"title": "Runbook Job Status"
																					}
																				]
																			}
																		]
																	},
																	{
																		"width": 50,
																		"contents": [
																			{
																				"_type": "layout/list",
																				"contents": [
																					{
																						"_type": "tile/sql-as-table",
																						"config": {
																							"context": {},
																							"source": {
																								"_security": "signing",
																								"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																								"querystring": "SELECT\ncount ([StatusId]), CASE\n    WHEN [StatusId] = 0 THEN 'Queued'\n\tWHEN [StatusId] = 1 THEN 'Running'\n\t\n\nEND AS Status\n\nFROM\n[Orchestrator].[Microsoft.SystemCenter.Orchestrator.Runtime.Internal].[Jobs] J\nwhere StatusId = '1' or StatusId  = '0'\nGroup by [StatusId]\n",
																								"__signed": {
																									"payload": {
																										"_security": "signing",
																										"connectionstring": "Data Source=test; Initial Catalog=au2matortest;User ID=test;Password=test;",
																										"querystring": "SELECT\ncount ([StatusId]), CASE\n    WHEN [StatusId] = 0 THEN 'Queued'\n\tWHEN [StatusId] = 1 THEN 'Running'\n\t\n\nEND AS Status\n\nFROM\n[Orchestrator].[Microsoft.SystemCenter.Orchestrator.Runtime.Internal].[Jobs] J\nwhere StatusId = '1' or StatusId  = '0'\nGroup by [StatusId]\n"
																									},
																									"signature": ""
																								}
																							},
																							"display": {
																								"showHeaders": true,
																								"columnOverrides": {
																									"status": {
																										"displayName": "Status"
																									},
																									"column1": {
																										"displayName": "Count"
																									}
																								},
																								"customColumns": {},
																								"columns": [
																									"status",
																									"column1"
																								],
																								"autohide": true,
																								"rowLink": "",
																								"openLinkInNewTab": true
																							}
																						},
																						"description": "",
																						"title": "Running Runbooks"
																					}
																				]
																			}
																		]
																	}
																]
															}
														]
													}
												]
											},
											{
												"width": 50,
												"contents": [
													{
														"_type": "layout/list",
														"contents": [
															{
																"_type": "tile/generic-azureloganalytics-donut",
																"config": {
																	"context": {},
																	"source": {
																		"_security": "signing",
																		"method": "POST",
																		"contentBody": "{\"query\":\"// View historical job status \\n// List all automation jobs. \\n// To create an alert for this query, click '+ New alert rule'\\nAzureDiagnostics\\n| where ResourceProvider == \\\"MICROSOFT.AUTOMATION\\\" and Category == \\\"JobLogs\\\" and ResultType != \\\"started\\\"\\n| summarize AggregatedValue = count() by ResultType,  RunbookName_s , JobId_g, _ResourceId\",\"timespan\":\"\",\"workspaces\":[]}",
																		"contentType": "application/json",
																		"columnOverrides": {
																			"value": null,
																			"grouping": null
																		},
																		"provider": "squaredup",
																		"__signed": {
																			"payload": {
																				"_security": "signing",
																				"method": "POST",
																				"contentBody": "{\"query\":\"// View historical job status \\n// List all automation jobs. \\n// To create an alert for this query, click '+ New alert rule'\\nAzureDiagnostics\\n| where ResourceProvider == \\\"MICROSOFT.AUTOMATION\\\" and Category == \\\"JobLogs\\\" and ResultType != \\\"started\\\"\\n| summarize AggregatedValue = count() by ResultType,  RunbookName_s , JobId_g, _ResourceId\",\"timespan\":\"\",\"workspaces\":[]}",
																				"contentType": "application/json",
																				"columnOverrides": {
																					"value": null,
																					"grouping": null
																				},
																				"provider": "squaredup"
																			},
																			"signature": ""
																		}
																	},
																	"display": {
																		"sizeMode": "default",
																		"legendScale": 1,
																		"showLegend": true,
																		"legendPosition": "right",
																		"palette": 0
																	}
																},
																"description": "",
																"title": "Azure Automation"
															}
														]
													}
												]
											}
										]
									}
								]
							}
						]
					}
				]
			}
		]
	},
	"derivedFrom": "00000000-0000-0000-0000-000000000000",
	"draft": false,
	"actions": [
		{
			"global": false,
			"name": "web",
			"parameters": {
				"taskId": "",
				"url": "http://localhost/"
			},
			"display": {
				"text": "Start au2mator"
			}
		}
	],
	"openAccess": {
		"enabled": false,
		"contexts": null
	},
	"colourMatching": true
}